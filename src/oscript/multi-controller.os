////////////////////////////////////////////////////////////////////////////
//
// Скрипт управляет запуском синхронизации с GIT по нескольким репозиториям
// Copyright EvilBeaver 2014
//
////////////////////////////////////////////////////////////////////////////

Перем юТест;
Перем мНастройки;

Функция ПолучитьСписокТестов(Знач ЮнитТестирование) Экспорт
	
	юТест = ЮнитТестирование;
	
	СписокТестов = Новый Массив;
	
	СписокТестов.Добавить("Тест_ДолженПрочитатьФайлНастроек");
	СписокТестов.Добавить("Тест_ДолженСоздатьСлужебныеКаталогиПроектов");
	СписокТестов.Добавить("Тест_ДолженСоздатьЗапросНаЗапускСборки");
	
	Возврат СписокТестов;
	
КонецФункции


////////////////////////////////////////////////////////////////////////
// Работа с REST-API билд-сервера

Функция СтрокаАвторизации()
	Возврат мНастройки.СерверПользователь + ":" + мНастройки.СерверПароль;
КонецФункции

Функция GetЗапрос(Знач Url)
	
	Ответ = ВызватьCURL(Url, "GET");
	
	Текст = ПрочитатьФайл(Ответ);
	УдалитьВременныйФайл(Ответ);
	
	Возврат Текст;
	
КонецФункции

Функция PostЗапрос(Знач Url, Знач Данные)

	Ответ = ВызватьCURL(Url, "POST", Данные);
	Если Не ПустаяСтрока(Ответ) Тогда
		Текст = ПрочитатьФайл(Ответ);
		УдалитьВременныйФайл(Ответ);
	Иначе
		Текст = "";
	КонецЕсли;
	
	Возврат Текст;

КонецФункции

Функция ПутьКCURL()
	Возврат КаталогВнешнихПрограмм() + "\curl.exe";
КонецФункции

Функция ВызватьCURL(Знач Url, Знач Метод, Знач ТелоЗапроса = "")
	
	СтрокаАвторизации = СтрокаАвторизации();
	
	Команда = ПутьКCURL() 
		+ " -u " + СтрокаАвторизации
		+ " -v " 
		+ Url
		+ " --request " + Метод;

	Если Не ПустаяСтрока(ТелоЗапроса) Тогда
		Файл = ЗаписатьТелоЗапроса(ТелоЗапроса);
		Команда = Команда + " --header ""Content-Type:application/xml"" --data-binary @" + Файл;
	КонецЕсли;
	
	Ответ = КаталогВременныхФайлов() + "\" + Новый УникальныйИдентификатор;
	Команда = Команда + " -o " + Ответ;
	
	КодВозврата = "";
	
	КомандаБезПароля = СтрЗаменить(Команда, СтрокаАвторизации, "********");
	СообщениеСборки(КомандаБезПароля);
	
	ЗапуститьПриложение(Команда, , Истина, КодВозврата);
	Если КодВозврата <> 0 Тогда
		УдалитьВременныйФайл(Файл);
		УдалитьВременныйФайл(Ответ);
		ВызватьИсключение "CURL вернул код возврата <"+КодВозврата+">";
	КонецЕсли;
	
	УдалитьВременныйФайл(Файл);
	ФайлОтвета = Новый Файл(Ответ);
	Если ФайлОтвета.Существует() Тогда
		Возврат Ответ;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ЗаписатьТелоЗапроса(Знач Текст)
	ИмяФайла = КаталогВременныхФайлов() + "\" + Новый УникальныйИдентификатор;
	Запись = Новый ЗаписьТекста(ИмяФайла);
	Запись.Записать(Текст);
	Запись.Закрыть();
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ПрочитатьФайл(Знач Путь)
	
	Ч = Новый ЧтениеТекста(Путь);
	Текст = Ч.Прочитать();
	Ч.Закрыть();
	
	Возврат Текст;
	
КонецФункции

Функция buildTypeLocator(Знач ИдентификаторКонфига)
	Возврат "id:" + ИдентификаторКонфига;
КонецФункции


////////////////////////////////////////////////////////////////////////
// Работа с конфигурационным файлом

Процедура ПрочитатьНастройкиИзФайла(Знач ФайлНастроек)
	
	мНастройки = Новый Структура;
	
	Чтение = Новый ЧтениеXML();
	Чтение.ОткрытьФайл(ФайлНастроек);
	Попытка
		Чтение.ПерейтиКСодержимому();
		Если Чтение.ЛокальноеИмя <> "gitsync-options" Тогда
			ВызватьИсключение "Неверная структура файла настроек";
		КонецЕсли;
		
		Чтение.Прочитать();
		ПрочитатьГлобальныеНастройки(Чтение);
		ПрочитатьНастройкиРепозитариев(Чтение);
		ПрочитатьНастройкиСервера(Чтение);
		
	Исключение
		Чтение.Закрыть();
		ВызватьИсключение;
	КонецПопытки;
	
	Чтение.Закрыть();
	
КонецПроцедуры

Процедура ПрочитатьГлобальныеНастройки(Знач Чтение)
	Чтение.Прочитать();
	
	Пока Не (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента и Чтение.ЛокальноеИмя = "global") Цикл
		КлючИЗначение = ПрочитатьОпцию(Чтение);
		
		Если КлючИЗначение.Ключ = "email-domain" Тогда
			Ключ = "ДоменПочтыДляGit";
		ИначеЕсли КлючИЗначение.Ключ = "v8-executable" Тогда
			Ключ = "ПутьКПлатформе83";
		ИначеЕсли КлючИЗначение.Ключ = "git-executable" Тогда
			Ключ = "ПутьGit";
		Иначе
			ВызватьИсключение НекорректнаяСтруктураНастроек();
		КонецЕсли;
		
		мНастройки.Вставить(Ключ, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Чтение.Прочитать();
	
КонецПроцедуры

Процедура ПрочитатьНастройкиРепозитариев(Чтение)
	мНастройки.Вставить("Репозитарии", Новый Массив);
	
	Если Чтение.ЛокальноеИмя <> "repositories" Тогда
		ВызватьИсключение НекорректнаяСтруктураНастроек();
	КонецЕсли;
	
	Чтение.Прочитать();
	
	Пока Не (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента и Чтение.ЛокальноеИмя = "repositories") Цикл
		ПрочитатьНастройкиРепозитария(Чтение);
	КонецЦикла;
	
	Чтение.Прочитать();
	
КонецПроцедуры

Процедура ПрочитатьНастройкиСервера(Чтение)
	
	Если Чтение.ЛокальноеИмя <> "buildserver" Тогда
		ВызватьИсключение НекорректнаяСтруктураНастроек();
	КонецЕсли;
	
	мНастройки.Вставить("Сервер", Чтение.ЗначениеАтрибута("url"));
	
	Чтение.Прочитать();
	
	Опция = ПрочитатьОпцию(Чтение);
	мНастройки.Вставить("СерверПользователь", Опция.Значение);
	Опция = ПрочитатьОпцию(Чтение);
	мНастройки.Вставить("СерверПароль", Опция.Значение);
	Опция = ПрочитатьОпцию(Чтение);
	мНастройки.Вставить("ИдентификаторКонфига", Опция.Значение);
	
КонецПроцедуры

Процедура ПрочитатьНастройкиРепозитария(Чтение)
	
	Репо = Новый Структура;
	Репо.Вставить("Имя", Чтение.ЗначениеАтрибута("name"));
	
	Чтение.Прочитать();
	
	мНастройки.Репозитарии.Добавить(Репо);
	
	Пока Не (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента и Чтение.ЛокальноеИмя = "repo") Цикл
		
		КлючИЗначение = ПрочитатьОпцию(Чтение);
		
		Если КлючИЗначение.Ключ = "git-local-path" Тогда
			Ключ = "КаталогВыгрузки";
		ИначеЕсли КлючИЗначение.Ключ = "git-remote" Тогда
			Ключ = "GitURL";
		ИначеЕсли КлючИЗначение.Ключ = "v8-storage-dir" Тогда
			Ключ = "КаталогХранилища1С";
		ИначеЕсли КлючИЗначение.Ключ = "email-domain" Тогда
			Ключ = "ДоменПочтыДляGit";
		ИначеЕсли КлючИЗначение.Ключ = "v8-executable" Тогда
			Ключ = "ПутьКПлатформе83";
		ИначеЕсли КлючИЗначение.Ключ = "git-executable" Тогда
			Ключ = "ПутьGit";
		Иначе
			ВызватьИсключение НекорректнаяСтруктураНастроек();
		КонецЕсли;
		
		Если ПустаяСтрока(КлючИЗначение.Значение) и мНастройки.Свойство(Ключ) Тогда
			КлючИЗначение.Значение = мНастройки[Ключ];
		КонецЕсли;
		
		Репо.Вставить(Ключ, КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Чтение.Прочитать();
КонецПроцедуры

Функция ПрочитатьОпцию(Знач Чтение)
	
	Перем Ключ;
	Перем Значение;
	
	Ключ = Чтение.ЛокальноеИмя;
	
	Чтение.Прочитать();
	Если Чтение.ТипУзла = ТипУзлаXML.Текст Тогда
		Значение = Чтение.Значение;
		Чтение.Прочитать();
	ИначеЕсли Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
		Значение = "";
	Иначе
		ВызватьИсключение НекорректнаяСтруктураНастроек();
	КонецЕсли;
	
	Чтение.Прочитать();
	
	Возврат Новый Структура("Ключ,Значение", Ключ, Значение);
	
КонецФункции

Функция НекорректнаяСтруктураНастроек()
	Возврат "Некорректная структура файла настроек";
КонецФункции


////////////////////////////////////////////////////////////////////////
// Работа с хранилищем 1С

Процедура СоздатьКаталогиПроектов()
	
	Корень = КаталогСкрипта() + "\data\";
	ОбеспечитьКаталог(Корень);
	
	Для Каждого Репо Из мНастройки.Репозитарии Цикл
		ОбеспечитьКаталог(Корень + Репо.Имя);
	КонецЦикла;

КонецПроцедуры

Процедура ОбеспечитьКаталог(Знач Путь)
	
	Файл = Новый Файл(Путь);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Путь);
	ИначеЕсли Не Файл.ЭтоКаталог() Тогда
		ВызватьИсключение "Файл " + Путь + " существует, но не является каталогом";
	КонецЕсли;
	
КонецПроцедуры

Функция НеобходимоСинхронизироватьХранилище(Знач Репо)
	
	Распаковщик = Новый V83Unpack();
	
	ПараметрыИнициализации = Распаковщик.ПолучитьПараметрыИнициализации();
	Распаковщик.Инициализация(ПараметрыИнициализации);
	
	ФайлХранилища = ИмяФайлаБазыХранилища(Репо.КаталогХранилища1С); 
	
	Возврат Распаковщик.ТребуетсяСинхронизироватьХранилищеСГит(ФайлХранилища, Репо.КаталогВыгрузки);
	
КонецФункции

////////////////////////////////////////////////////////////////////////
// Вспомогательные методы

Функция ИмяФайлаБазыХранилища(Знач Каталог)
	Возврат Каталог + "\1cv8ddb.1CD";
КонецФункции

Функция АбсолютныйПуть(Знач ОтносительныйПуть)
	
	Каталог = Новый Файл(ТекущийСценарий().Источник).Путь;
	Возврат Каталог + "\" + ОтносительныйПуть;
	
КонецФункции

Функция КаталогВнешнихПрограмм()
	Возврат АбсолютныйПуть("bin");
КонецФункции

Функция КаталогСкрипта()
	Возврат Новый Файл(ТекущийСценарий().Источник).Путь;
КонецФункции

Процедура УдалитьВременныйФайл(Знач Путь)
	Если ПустаяСтрока(Путь) Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(Путь);
	Если Файл.Существует() Тогда
		Попытка
			УдалитьФайлы(Файл.ПолноеИмя);
		Исключение
			СообщениеСборки("Не удален временный файл " + Файл.ПолноеИмя);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоЗапускТеста()
	Возврат СтартовыйСценарий().Источник <> ТекущийСценарий().Источник;
КонецФункции

//////////////////////////////////////////////////////////////////////

Процедура Инициализация()
	
	ПодключитьСценарий(АбсолютныйПуть("unpack.os"), "V83Unpack");
	
	ПрочитатьПараметры();
	
	//СоздатьКаталогиПроектов();
	
КонецПроцедуры

Процедура ПрочитатьПараметры()
	
	ФайлНастроек = Новый Файл(АбсолютныйПуть("config.xml"));
	Если Не ФайлНастроек.Существует() Тогда
		ВызватьИсключение "Не обнаружен файл настроек config.xml";
	КонецЕсли;
	
	ПрочитатьНастройкиИзФайла(ФайлНастроек.ПолноеИмя);
	
КонецПроцедуры

Функция СинхронизироватьПринудительно()
	
	Если АргументыКоманднойСтроки.Количество() > 0 Тогда
		СинхронизироватьВсегда = НРег(АргументыКоманднойСтроки[0]) = "-force";
		Если СинхронизироватьВсегда Тогда
			СообщениеСборки("Включена принудительная синхронизация");
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура СинхронизироватьХранилища()

	СинхронизироватьПринудительно = СинхронизироватьПринудительно();
	
	СообщениеСборки("Синхронизация началась");
	
	Для Каждого Репо Из мНастройки.Репозитарии Цикл
		
		Попытка
			
			Если СинхронизироватьПринудительно Тогда
				ВыполнитьСинхронизациюПоОдномуРепо(Репо);
			Иначе
				ВыполнитьСинхронизациюПриНеобходимости(Репо);
			КонецЕсли;
			
		Исключение
			СообщениеСборки(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	СообщениеСборки("Синхронизация завершена");
КонецПроцедуры

Процедура ВыполнитьСинхронизациюПриНеобходимости(Знач Репо)
	
	Если Не НеобходимоСинхронизироватьХранилище(Репо) Тогда
		СообщениеСборки("Синхронизация для '"+Репо.Имя+"' не требуется");
		Возврат;
	КонецЕсли;
	
	ВыполнитьСинхронизациюПоОдномуРепо(Репо);
	
КонецПроцедуры

Процедура ВыполнитьСинхронизациюПоОдномуРепо(Знач Репо)
	
	СообщениеСборки("Синхронизация для '"+Репо.Имя+"'");
	
	Запрос = СоздатьЗапросНаЗапускСборки(Репо);
	СообщениеСборки(Запрос);
	Url = UrlОчередиСборки();
	Ответ = PostЗапрос(Url, Запрос);
	СообщениеСборки(Ответ);
	Попытка
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(Ответ);
		ЧтениеXML.ПерейтиКСодержимому();
	Исключение
		ВызватьИсключение "не удалось отправить POST запрос." + Ответ;
	КонецПопытки;
	
	// TODO: Раскомментировать, если будет необходимость проставлять теги
	// СообщениеСборки("Установка тега с именем проекта");
	// ПроставитьТегВЗапущеннойСборке(ЧтениеXML.ЗначениеАтрибута("taskId"), Репо.Имя);
	
КонецПроцедуры

Функция UrlОчередиСборки()
	Возврат "http://" + мНастройки.Сервер + "/httpAuth/app/rest/buildQueue";
КонецФункции

Процедура ПроставитьТегВЗапущеннойСборке(Знач НомерЗаданияСборки, Знач Тег)

	ДанныеОСборке = GetЗапрос(UrlОчередиСборки() + "/" + НомерЗаданияСборки);
	
	СообщениеСборки("Получен ответ:
	|" + ДанныеОСборке);
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ДанныеОСборке);
	ЧтениеXML.ПерейтиКСодержимому();
	
	ИдентификаторСборки = ЧтениеXML.ЗначениеАтрибута("id");
	
	Если ПустаяСтрока(ИдентификаторСборки) Тогда
		СообщениеСборки("Не удалось проставить тег");
		Возврат;
	КонецЕсли;
	
	Url = мНастройки.Сервер + "/httpAuth/app/rest/builds/id:" + ИдентификаторСборки + "/tags";
	
	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	Запись.ЗаписатьНачалоЭлемента("tags");
	Запись.ЗаписатьНачалоЭлемента("tag");
	Запись.ЗаписатьТекст(Тег);
	Запись.ЗаписатьКонецЭлемента();
	Запись.ЗаписатьКонецЭлемента();
	
	ТелоЗапроса = Запись.Закрыть();
	Ответ = PostЗапрос(Url,ТелоЗапроса);
	Сообщить(Ответ);

КонецПроцедуры

Функция СоздатьЗапросНаЗапускСборки(Знач Репо)

	Запись = Новый ЗаписьXML();
	Запись.УстановитьСтроку();
	Запись.ЗаписатьНачалоЭлемента("build");
	
	Запись.ЗаписатьНачалоЭлемента("buildType");
	Запись.ЗаписатьАтрибут("id", мНастройки.ИдентификаторКонфига);
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьНачалоЭлемента("statusText");
	Запись.ЗаписатьТекст("Синхронизация " + Репо.Имя);
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьНачалоЭлемента("tags");
	Запись.ЗаписатьНачалоЭлемента("tag");
	Запись.ЗаписатьТекст(Репо.Имя);
	Запись.ЗаписатьКонецЭлемента();
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьНачалоЭлемента("properties");
	ЗаписатьСвойство(Запись, "env.git_email_domain", Репо.ДоменПочтыДляGit);
	ЗаписатьСвойство(Запись, "env.git_executable", Репо.ПутьGit);
	ЗаписатьСвойство(Запись, "env.git_local_repo", Репо.КаталогВыгрузки);
	ЗаписатьСвойство(Запись, "env.git_remote_repo", Репо.GitURL);
	ЗаписатьСвойство(Запись, "env.storage_dir", Репо.КаталогХранилища1С);
	ЗаписатьСвойство(Запись, "env.v8_executable", Репо.ПутьКПлатформе83);
	ЗаписатьСвойство(Запись, "ProjectName", Репо.Имя);
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.ЗаписатьКонецЭлемента();
	
	Возврат Запись.Закрыть();

КонецФункции

Процедура ЗаписатьСвойство(Знач Запись, Знач Имя, Знач Значение)
	Если ПустаяСтрока(Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Запись.ЗаписатьНачалоЭлемента("property");
	Запись.ЗаписатьАтрибут("name", Имя);
	Запись.ЗаписатьАтрибут("value", Значение);
	Запись.ЗаписатьКонецЭлемента();
КонецПроцедуры

Процедура СообщениеСборки(Знач Текст)
	Сообщить(Текст);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////
// Юнит-тесты

Функция ПрочитатьТестовыеНастройки()
	ФайлНастроек = АбсолютныйПуть("testData\config.xml");
	ПрочитатьНастройкиИзФайла(ФайлНастроек);
	мНастройки.Вставить("ИдентификаторКонфига", "testID");
КонецФункции

Процедура Тест_ДолженПрочитатьФайлНастроек() Экспорт
	
	ПрочитатьТестовыеНастройки();
	
	// глобальные настройки
	юТест.ПроверитьРавенство("server.com", мНастройки.ДоменПочтыДляGit);
	юТест.ПроверитьРавенство("1cv8.exe"  , мНастройки.ПутьКПлатформе83);
	юТест.ПроверитьРавенство("git"       , мНастройки.ПутьGit);
	
	// репозитарии
	юТест.ПроверитьРавенство(2, мНастройки.Репозитарии.Количество());
	
	юТест.ПроверитьРавенство("test", мНастройки.Репозитарии[0].Имя);
	юТест.ПроверитьРавенство("путь1", мНастройки.Репозитарии[0].КаталогВыгрузки);
	юТест.ПроверитьРавенство("адрес1", мНастройки.Репозитарии[0].GitURL);
	юТест.ПроверитьРавенство("каталог1", мНастройки.Репозитарии[0].КаталогХранилища1С);
	юТест.ПроверитьРавенство(мНастройки.ПутьGit, мНастройки.Репозитарии[0].ПутьGit);
	юТест.ПроверитьРавенство(мНастройки.ПутьКПлатформе83, мНастройки.Репозитарии[0].ПутьКПлатформе83);
	юТест.ПроверитьРавенство(мНастройки.ДоменПочтыДляGit, мНастройки.Репозитарии[0].ДоменПочтыДляGit);
	
	юТест.ПроверитьРавенство("test2", мНастройки.Репозитарии[1].Имя);
	юТест.ПроверитьРавенство("путь2", мНастройки.Репозитарии[1].КаталогВыгрузки);
	юТест.ПроверитьРавенство("адрес2", мНастройки.Репозитарии[1].GitURL);
	юТест.ПроверитьРавенство("каталог2", мНастройки.Репозитарии[1].КаталогХранилища1С);
	юТест.ПроверитьРавенство(мНастройки.ПутьGit, мНастройки.Репозитарии[1].ПутьGit);
	юТест.ПроверитьРавенство(мНастройки.ПутьКПлатформе83, мНастройки.Репозитарии[1].ПутьКПлатформе83);
	юТест.ПроверитьРавенство("gmail.com", мНастройки.Репозитарии[1].ДоменПочтыДляGit);
	
	// сервер
	юТест.ПроверитьРавенство("localhost" , мНастройки.Сервер);
	
КонецПроцедуры

Процедура Тест_ДолженСоздатьСлужебныеКаталогиПроектов() Экспорт

	ПрочитатьТестовыеНастройки();
	
	СоздатьКаталогиПроектов();
	
	Каталог = Новый Файл(КаталогСкрипта() + "\data\test");
	юТест.ПроверитьИстину(Каталог.Существует(), "Каталог должен существовать");
	юТест.ПроверитьИстину(Каталог.ЭтоКаталог(), "Каталог должен быть каталогом");

	УдалитьФайлы(Каталог.ПолноеИмя);
	
	Каталог = Новый Файл(КаталогСкрипта() + "\data\test2");
	юТест.ПроверитьИстину(Каталог.Существует(), "Каталог должен существовать");
	юТест.ПроверитьИстину(Каталог.ЭтоКаталог(), "Каталог должен быть каталогом");

	УдалитьФайлы(Каталог.ПолноеИмя);
	
	УдалитьФайлы(КаталогСкрипта() + "\data");
	
КонецПроцедуры

Процедура Тест_ДолженСоздатьЗапросНаЗапускСборки() Экспорт
	
	ПрочитатьТестовыеНастройки();
	
	Репо = мНастройки.Репозитарии[0];
	
	Запрос = СоздатьЗапросНаЗапускСборки(Репо);
	
	Эталон = 
	"<build>
	|    <buildType id="""+мНастройки.ИдентификаторКонфига+""" />
	|    <statusText>Синхронизация " + Репо.Имя + "</statusText>
	|    <tags>
	|        <tag>" + Репо.Имя + "</tag>
	|    </tags>
	|    <properties>
	|        <property name=""env.git_email_domain"" value="""+Репо.ДоменПочтыДляGit+""" />
	|        <property name=""env.git_executable"" value="""+Репо.ПутьGit+""" />
	|        <property name=""env.git_local_repo"" value="""+Репо.КаталогВыгрузки+""" />
	|        <property name=""env.git_remote_repo"" value="""+Репо.GitURL+""" />
	|        <property name=""env.storage_dir"" value="""+Репо.КаталогХранилища1С+""" />
	|        <property name=""env.v8_executable"" value="""+Репо.ПутьКПлатформе83+""" />
	|        <property name=""ProjectName"" value="""+Репо.Имя+""" />
	|    </properties>
	|</build>";
	
	юТест.ПроверитьРавенство(
		СтрЗаменить(Эталон, Символы.ВК + Символы.ПС, Символы.ПС), 
		СтрЗаменить(Запрос, Символы.ВК + Символы.ПС, Символы.ПС)
		);
	
КонецПроцедуры

Если Не ЭтоЗапускТеста() Тогда
	Инициализация();
	СинхронизироватьХранилища();
КонецЕсли;